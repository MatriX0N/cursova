import React, { useEffect, useState } from "react";
import axios from "axios";
import "./Bookmarks.css";

const Bookmarks = () => {
  const [bookmarkedCities, setBookmarkedCities] = useState([]);
  const [selectedCity, setSelectedCity] = useState(null);
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const storedBookmarks = JSON.parse(localStorage.getItem("bookmarkedCities")) || [];
    setBookmarkedCities(storedBookmarks);
  }, []);

  const handleCityClick = async (city) => {
    setSelectedCity(city);
    setWeatherData(null);
    setError(null);
    setLoading(true);
    try {
      const response = await axios.get("https://api.weatherapi.com/v1/forecast.json", {
        params: {
          key: "3035a3aa463a4aeea0f203951253005",
          q: city,
          days: 7,
          lang: "ua",
        },
      });
      setWeatherData(response.data);
    } catch (err) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞");
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveBookmark = (cityToRemove) => {
    const updated = bookmarkedCities.filter((city) => city !== cityToRemove);
    localStorage.setItem("bookmarkedCities", JSON.stringify(updated));
    setBookmarkedCities(updated);

    // –Ø–∫—â–æ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–µ –º—ñ—Å—Ç–æ ‚Äî –æ—á–∏—â–∞—î–º–æ –ø–æ–≥–æ–¥—É
    if (selectedCity === cityToRemove) {
      setWeatherData(null);
      setSelectedCity(null);
    }
  };

  return (
    <div className="bookmarks-container">
      <h1>üìå –ó–∞–∫–ª–∞–¥–∫–∏</h1>

      {bookmarkedCities.length === 0 ? (
        <p>–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç.</p>
      ) : (
        <ul className="bookmarks-list scrollable">
          {bookmarkedCities.map((city, index) => (
            <li key={index} className="bookmark-item">
              <span onClick={() => handleCityClick(city)}>{city}</span>
              <button className="remove-btn" onClick={() => handleRemoveBookmark(city)}>‚úï</button>
            </li>
          ))}
        </ul>
      )}

      {loading && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}

      {weatherData && (
        <div className="weather-box">
          <h2>
            {weatherData.location.name}, {weatherData.location.country}
          </h2>
          <p>üïí {weatherData.location.localtime}</p>
          <img
            src={`https:${weatherData.current.condition.icon}`}
            alt={weatherData.current.condition.text}
          />
          <p>
            <strong>{weatherData.current.condition.text}</strong>
          </p>
          <p>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weatherData.current.temp_c}¬∞C</p>
          <p>üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {weatherData.current.humidity}%</p>
          <p>üí® –í—ñ—Ç–µ—Ä: {weatherData.current.wind_kph} –∫–º/–≥–æ–¥</p>

          <hr />

          <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω—ñ–≤</h3>
          <div className="forecast-list">
            {weatherData.forecast.forecastday.map((day) => (
              <div key={day.date} className="forecast-item">
                <p><strong>{day.date}</strong></p>
                <img
                  src={`https:${day.day.condition.icon}`}
                  alt={day.day.condition.text}
                />
                <p>{day.day.condition.text}</p>
                <p>üå°Ô∏è {day.day.mintemp_c}¬∞C ‚Äì {day.day.maxtemp_c}¬∞C</p>
                <p>üåû –°—Ö—ñ–¥: {day.astro.sunrise}, –ó–∞—Ö—ñ–¥: {day.astro.sunset}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Bookmarks;
